#!/usr/bin/env python

import os, sys
import subprocess

PYTHON_SRC_CHANGED = False
JS_SRC_CHANGED = False

def run_nose_test():
    output = ''
    try:
        output = subprocess.check_output(
            'nosetests -v --with-doctest --doctest-tests --with-xunit --xunit-file=reports/nosetests.xml '
            '--traverse-namespace --with-coverage --cover-package=config,tools '
            '--cover-xml --cover-xml-file=reports/pycoverage.xml',
            shell=True)
    except subprocess.CalledProcessError:
        sys.exit("Python unit tests failed. Fix and try again.")
    finally:
        print output


def run_grunt_test():
    output = ''
    try:
        output = subprocess.check_output(
            'grunt test',
            shell=True)
    except subprocess.CalledProcessError:
        sys.exit("JS unit tests failed. Fix and try again.")
    finally:
        print output


def run_linters():
    """
    Checks your git commit with JSHint, pylint and pep8.
    Only checks staged files.
    """
    global PYTHON_SRC_CHANGED, JS_SRC_CHANGED
    errors = []

    # get all staged files
    f = os.popen('git diff --cached --name-only --diff-filter=ACM')

    for file in f.read().splitlines():

        # makes sure we're dealing javascript files
        if file.endswith('.js') and not file.startswith('node_modules/'):
            JS_SRC_CHANGED = True
            g = os.popen('jshint -c app/.jshintrc ' + file)
            # add all errors from all files together
            for error in g.readlines():
                errors.append(error)

            if file.endswith('.spec.js'):
                g = os.popen('grep -Hn fdescribe ' + file)
                # add all errors from all files together
                for error in g.readlines():
                    errors.append(error)

                g = os.popen('grep -Hn fit ' + file)
                # add all errors from all files together
                for error in g.readlines():
                    errors.append(error)

        # makes sure we're dealing javascript files
        elif file.endswith('.py'):
            PYTHON_SRC_CHANGED = True
            g = os.popen('pylint ' + file)
            # add all errors from all files together
            for error in g.readlines():
                errors.append(error)

            g = os.popen('pep8 ' + file)
            # add all errors from all files together
            for error in g.readlines():
                errors.append(error)

    # got errors?
    if errors:
        for i, error in enumerate(errors):
            print error,

        # Abort the commit
        sys.exit(1)


if __name__ == '__main__':
    run_linters()
    if JS_SRC_CHANGED:
        run_grunt_test()
    if PYTHON_SRC_CHANGED:
        run_nose_test()
